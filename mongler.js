// Generated by CoffeeScript 1.7.1
(function() {
  var Schema, User, autoInc, connection, env, mongo, mongoose, userSchema;

  mongoose = require('mongoose');

  Schema = mongoose.Schema;

  autoInc = require('mongoose-auto-increment');

  if (process.env.VCAP_SERVICES) {
    env = JSON.parse(process.env.VCAP_SERVICES);
    mongo = env['mongodb-2.2'][0].credentials;
  } else {
    mongo = {
      "username": "admin",
      "password": "1494",
      "url": "mongodb://localhost:27017/eidolon"
    };
  }

  connection = mongoose.createConnection(mongo.url);

  autoInc.initialize(connection);

  userSchema = mongoose.Schema({
    id: {
      type: Schema.Types.ObjectId
    },
    userid: {
      type: Number
    },
    fullname: {
      type: String
    },
    username: {
      type: String
    },
    email: {
      type: String
    },
    password: {
      type: String
    },
    date_add: {
      type: Date,
      "default": Date.now
    },
    active: {
      type: Boolean,
      "default": true
    }
  });

  userSchema.plugin(autoInc.plugin, {
    model: 'User',
    field: 'userid'
  });

  User = connection.model('User', userSchema);

  exports.findAllUsers = function(req, res, next) {
    return User.find({}, function(err, users) {
      if (err) {
        res.send(500, err);
      }
      res.send(200, users);
      return next();
    });
  };

  exports.addUser = function(req, res, next) {
    var content, user;
    user = new User();
    if (req.body instanceof Object) {
      content = req.body;
    } else {
      content = JSON.parse(req.body);
    }
    user.fullname = content.fullname;
    user.username = content.username;
    user.email = content.email;
    user.password = content.password;
    user.active = content.active;
    return user.save(function(err, newuser) {
      if (err) {
        res.send(500, err);
      }
      res.send(201, newuser);
      return next();
    });
  };

  exports.findUser = function(req, res, next) {
    return User.findOne({
      userid: req.params.userid
    }, function(err, user) {
      if (err) {
        res.send(500, err);
      }
      if (user) {
        res.send(200, user);
      } else {
        res.send(404);
      }
      return next();
    });
  };

  exports.updateUser = function(req, res, next) {
    return User.findOne({
      userid: req.params.userid
    }, function(err, user) {
      var content;
      if (err) {
        res.send(500, err);
      }
      if (!user) {
        res.send(404);
      }
      if (req.body instanceof Object) {
        content = req.body;
      } else {
        content = JSON.parse(req.body);
      }
      if (content.fullname != null) {
        user.fullname = content.fullname;
      }
      if (content.username != null) {
        user.username = content.username;
      }
      if (content.email != null) {
        user.email = content.email;
      }
      if (content.password != null) {
        user.password = content.password;
      }
      if (content.active != null) {
        user.active = content.active;
      }
      user.save();
      res.send(202, user);
      return next();
    });
  };

  exports.deleteUser = function(req, res, next) {
    return User.findOne({
      userid: req.params.userid
    }, function(err, user) {
      if (err) {
        res.send(500, err);
      }
      if (!user) {
        res.send(404);
      }
      user.remove();
      res.send(202);
      return next();
    });
  };

  exports.deleteAll = function(req, res, next) {
    return User.find({}, function(err, users) {
      if (err) {
        res.send(500, err);
      }
      users.forEach(function(user) {
        user.remove();
      });
      User.resetCount(function(err, next) {});
      res.send(202);
      return next();
    });
  };

}).call(this);
